#!/usr/bin/env python3

import os
import subprocess
import sys
import time
import psutil


def get_memory_usage(pid):
    try:
        process = psutil.Process(pid)
        memory_info = process.memory_info()
        return memory_info.rss
    except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
        return 0


def get_process_tree(pid):
    process_tree = []

    try:
        process = psutil.Process(pid)
        process_tree.append(process)

        for child in process.children(recursive=True):
            process_tree.append(child)

    except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
        pass

    return process_tree


def measure_memory_usage(command):
    env = os.environ.copy()
    
    process = subprocess.Popen(
        command,
        
        env=env,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
    )
    pid = process.pid

    memory_usages = []
    while process.poll() is None:
        process_tree = get_process_tree(pid)
        one_time_memory_usages = []

        for proc in process_tree:
            memory_usage = get_memory_usage(proc.pid)
            one_time_memory_usages.append(memory_usage)

        one_time_memory_usage = sum(one_time_memory_usages)
        if one_time_memory_usage != 0:
            memory_usages.append(one_time_memory_usage)
        
        time.sleep(0.1)

    max_memory_usage, avg_memory_usage = 0, 0
    if memory_usages:
        max_memory_usage = max(memory_usages)
        avg_memory_usage = sum(memory_usages) / len(memory_usages)
    return max_memory_usage, avg_memory_usage


command_to_run = sys.argv[1:]

t = 10

max_memory_usages, avg_memory_usages = [], []

print("\t".join(["id", "max(KB)", "avg(KB)"]))
i = 0
while True:
    m, a = measure_memory_usage(command_to_run)
    
    
    max_memory_usages.append(m)
    avg_memory_usages.append(a)
    

    print(f"{i} \t{m/1024}\t{a/ 1024}")
    i += 1
    if i == t:
        break

max_memory_usage = sum(max_memory_usages) / t
avg_memory_usage = sum(avg_memory_usages) / t


print(f"all\t {max_memory_usage/1024}\t{avg_memory_usage/ 1024}")

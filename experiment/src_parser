#!/usr/bin/env python3

import argparse
import json
import os
import re
import subprocess


def parse_text(text):
    lines = text.split("\n")
    parsing_mode = False
    function_name = ""
    info_dict = {}
    asm_dict = {}

    begin_address = 0
    end_address = 0

    old_source_file = ""
    old_line_number = ""

    kernels_info = []

    is_new = True
    for line in lines:
        if line.startswith(".text."):
            parsing_mode = True
            function_name = line.split(".text.", 1)[1].strip(":")
            continue

        if parsing_mode:
            if line.startswith("//--------"):
                address_range = (begin_address, end_address)
                info_dict[address_range] = f"{old_source_file}:{old_line_number}"

                kernels_info.append((function_name, info_dict, asm_dict))

                parsing_mode = False
                is_new = True
                info_dict = {}
                asm_dict = {}

            match = re.search(r'//## File "(.*?)", line (\d+)', line)
            if match:
                source_file = match.group(1)
                line_number = match.group(2)

                if not is_new:
                    address_range = (begin_address, end_address)
                    info_dict[address_range] = f"{old_source_file}:{old_line_number}"

                old_source_file, old_line_number = source_file, line_number
                is_new = True
                continue

            else:
                match = re.match(r"/\*(\w+)\*/\s+(.*)", line.lstrip())
                if match:
                    offset = int(match.group(1), 16)
                    assembly_code = match.group(2)

                    asm_dict[offset] = assembly_code
                    if is_new:
                        begin_address = offset
                    end_address = offset + 0x10

                    is_new = False

    return kernels_info


def parse_cuobjdump_output(name):
    meta_info = {}

    cmd = f"cuobjdump {name} -xelf all"
    print(f"{cmd}")
    output = subprocess.check_output(cmd, shell=True).decode("utf-8")

    lines = output.split("\n")
    filenames = []
    for line in lines:
        if line.startswith("Extracting"):
            filename = line.split(":")[1].strip()
            filenames.append(filename)

    for filename in filenames:
        if not os.path.exists(filename):
            continue
        cmd = f"nvdisasm -g {filename}"
        print(f"{cmd}")
        output = subprocess.check_output(cmd, shell=True).decode("utf-8")
        kernels_info = parse_text(output)

        os.remove(filename)

        for function_name, info_dict, asm_dict in kernels_info:
            if function_name:
                meta_info[function_name] = {
                    "src": {
                        ":".join(map(hex, key)): value
                        for key, value in info_dict.items()
                    },
                    "asm": {hex(key): value for key, value in asm_dict.items()},
                }

    return meta_info


parser = argparse.ArgumentParser(
    description="Parse cuobjdump output and run nvdisasm on each file."
)
parser.add_argument("program_name", help="Name of the program to analyze")


args = parser.parse_args()


meta = parse_cuobjdump_output(args.program_name)

with open(f"{args.program_name}.json", "w") as f:
    print(f"dump to {args.program_name}.json")
    json.dump(meta, f, indent=4)
